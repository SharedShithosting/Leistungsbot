# Run this job on pushes to `main`, and for pull requests. If you don't specify
# `branches: [main], then this actions runs _twice_ on pull requests, which is
# annoying.
name: pytest
on:
  push:
    branches: [main]
  pull_request:
jobs:
  test:
    runs-on: ubuntu-latest
    environment:
      name: My Environment
    env:
      # this will take the entire vars context configured in the repository > environments
      # setting and convert it to JSON so we can automatically assign all the values to the
      # runner's environment
      VARS_CONTEXT: ${{ toJson(vars) }}
      SECRETS_CONTEXT: ${{ toJson(secrets) }}
    steps:
      - uses: actions/checkout@v3
      # If you wanted to use multiple Python versions, you'd have specify a matrix in the job and
      # reference the matrixe python version here.
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Shutdown Ubuntu MySQL (SUDO)
        run: sudo service mysql stop # Shutdown the Default MySQL, "sudo" is necessary, please not remove it
      - name: Set up MariaDB
        uses: getong/mariadb-action@v1.11
        with:
          mysql database: $LEISTUNGSBOT_MYSQL__DB
          mysql user: $LEISTUNGSBOT_MYSQL__USER
          mysql password: '${{ secrets.LEISTUNGSBOT_MYSQL__PASSWORD }}'
          mysql root password: ${{ secrets.MYSQL_ROOT }}
      - run: mysql -h 127.0.0.1 --port 3306 -uroot -p${{ secrets.MYSQL_ROOT }} -e "source example_db/leistung_db.sql"
      # Cache the installation of Poetry itself, e.g. the next step. This prevents the workflow
      # from installing Poetry every time, which can be slow. Note the use of the Poetry version
      # number in the cache key, and the "-0" suffix: this allows you to invalidate the cache
      # manually if/when you want to upgrade Poetry, or if something goes wrong. This could be
      # mildly cleaner by using an environment variable, but I don't really care.
      - name: cache poetry install
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-1.5.1-0
      # Install Poetry. You could do this manually, or there are several actions that do this.
      # `snok/install-poetry` seems to be minimal yet complete, and really just calls out to
      # Poetry's default install script, which feels correct. I pin the Poetry version here
      # because Poetry does occasionally change APIs between versions and I don't want my
      # actions to break if it does.
      #
      # The key configuration value here is `virtualenvs-in-project: true`: this creates the
      # venv as a `.venv` in your testing directory, which allows the next step to easily
      # cache it.
      - uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      # Cache your dependencies (i.e. all the stuff in your `pyproject.toml`). Note the cache
      # key: if you're using multiple Python versions, or multiple OSes, you'd need to include
      # them in the cache key. I'm not, so it can be simple and just depend on the poetry.lock.
      - name: cache deps
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}
      # Install dependencies. `--no-root` means "install all dependencies but not the project
      # itself", which is what you want to avoid caching _your_ code. The `if` statement
      # ensures this only runs on a cache miss.
      - run: poetry install --no-interaction --no-root --with=dev
        if: steps.cache-deps.outputs.cache-hit != 'true'
      # Now install _your_ project. This isn't necessary for many types of projects -- particularly
      # things like Django apps don't need this. But it's a good idea since it fully-exercises the
      # pyproject.toml and makes that if you add things like console-scripts at some point that
      # they'll be installed and working.
      - run: poetry install --no-interaction
      - name: Set env vars from vars context JSON
        run: |
          # Pipe the JSON string into jq
          echo "$VARS_CONTEXT" |
          # Convert JSON object into an array of key-value pairs
          jq -r 'to_entries |
          # Map over each key-value pair
          .[] |
          # Format each pair as "KEY=VALUE" and append it all to the environment file
          "\(.key)=\(.value)"' >> $GITHUB_ENV
      - name: Set env vars from secrets context JSON
        run: |
          # Pipe the JSON string into jq
          echo "$SECRETS_CONTEXT" |
          # Convert JSON object into an array of key-value pairs
          jq -r 'to_entries |
          # Map over each key-value pair
          .[] |
          # Format each pair as "KEY=VALUE" and append it all to the environment file
          "\(.key)=\(.value)"' >> $GITHUB_ENV
      # And finally run tests. I'm using pytest and all my pytest config is in my `pyproject.toml`
      # so this line is super-simple. But it could be as complex as you need.
      - run: poetry run pytest --junitxml=reports/junit/junit.xml
      # Generate badges
      - run: poetry run genbadge tests -o reports/badges/tests-badge.svg
      # Run coverage tests
      - run: poetry run coverage run -m pytest
      - run: poetry run coverage report -m
      - run: poetry run coverage xml -o reports/coverage/coverage.xml
      - run: poetry run coverage html -d reports/coverage
      # Generate badges
      - run: poetry run genbadge coverage -o reports/badges/coverage-badge.svg
      # flake8
      - run: poetry run flake8 leistungsbot --exit-zero --format=html --htmldir ./reports/flake8 --statistics --tee --output-file reports/flake8/flake8stats.txt
      # Generate badges
      - run: poetry run genbadge flake8 -o reports/badges/flake8-badge.svg
      - name: Archive badges
        if: "${{ github.ref_name  == 'main' }}" # This step will only run if `[deploy]` is found
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports
